name: Docker Test
on:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      tenant_management_service: ${{ steps.filter.outputs.tenant_management_service }}
      aggregation_service: ${{ steps.filter.outputs.aggregation_service }}
      resource_reporter: ${{ steps.filter.outputs.resource_reporter }}
      cluster-state_snapshotter: ${{ steps.filter.outputs.cluster_state_snapshotter }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            tenant_management_service:
              - 'playground/method_vs_macro/Cargo.toml'
            aggregation_service:
              - '.github/actions/build-and-push/action.yaml'
            resource_reporter:
              - '.github/workflows/ci.yaml'
              - 'services/resource-reporter/*.toml'
              - 'services/resource-reporter/Dockerfile'
            cluster_state_snapshotter:
              - 'README.md'

  get-components:
    runs-on: ubuntu-latest
    needs: filter
    steps:
      - uses: actions/checkout@v3
      - id: read-component-payload
        uses: ActionsTools/read-json-action@main
        with:
          file_path: ".github/components-payload.json"
      - id: filter-components
        run: |
          FILTERED_COMPONENTS="$(cat .github/components-payload.json | jq -c '.components | map(select(.prod_released == true))' )"
          echo "$FILTERED_COMPONENTS"
          echo "components=${FILTERED_COMPONENTS}" >> $GITHUB_OUTPUT
    outputs:
      components: ${{ steps.filter-components.outputs.components }}

  docker-tests:
    needs: ["filter", "get-components"]
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.get-components.outputs.components) }}
    runs-on: ubuntu-latest
    steps:
      - name: Debug
        if: needs.filter.outputs[matrix.name] == 'true'
        run: |
          echo '${{ matrix.component.dockerfile_path }}'
        shell: bash
